console.log('vConsole is worked!');

import { createAppKit } from '@reown/appkit';
import { mainnet } from '@reown/appkit/networks';
import { EthersAdapter } from '@reown/appkit-adapter-ethers';
import { BrowserProvider, ethers } from 'ethers';

// 1. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Project ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ Reown Cloud
const projectId = '4245768f884327f17fabceb32be2260d';

// 2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–µ—Ç—å (Ethereum Mainnet)
const networks = [mainnet];

// 3. –ù–∞—Å—Ç—Ä–æ–∏–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Ethers.js
const ethersAdapter = new EthersAdapter({
  projectId,
  networks,
  ethers, // –ü–µ—Ä–µ–¥–∞—ë–º Ethers.js
});

// 4. –£–∫–∞–∂–∏—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const metadata = {
  name: 'HORNIVERSE DApp',
  description: 'HORNIVERSE DApp',
  url: 'https://uni2.ekaterinabeska.com/',
  icons: ['https://uni2.ekaterinabeska.com/icon.png'],
};

console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AppKit...");

// 5. –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä AppKit
const appKit = createAppKit({
  adapters: [ethersAdapter],
  networks,
  metadata,
  projectId,
});

console.log("appKit —Å–æ–∑–¥–∞–Ω:", appKit);

// 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function getWalletProvider() {
  console.log("üîç –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã...");
  const connectors = appKit.getConnectors();
  console.log("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã:", connectors);

  let provider = null;
  for (const connector of connectors) {
    if (connector.provider) {
      provider = connector.provider;
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:", connector.name);
      break;
    }
  }

  if (!provider) {
    throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π Web3-–ø—Ä–æ–≤–∞–π–¥–µ—Ä.");
  }

  return new BrowserProvider(provider);
}

// 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Login"
document.getElementById("login").addEventListener("click", async () => {
  console.log("üì¢ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º WalletConnect...");
  await appKit.open(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

  let attempts = 0;
  const maxAttempts = 10; // –õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫

  const intervalId = setInterval(async () => {
    console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
    const address = await appKit.getAddress();

    if (address) {
      console.log("‚úÖ –ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω:", address);

      try {
        const ethersProvider = await getWalletProvider();
        console.log("ethersProvider:", ethersProvider);

        const signer = await ethersProvider.getSigner();
        console.log("signer:", signer);

        const message = `Sign in to HORNIVERSE with address: ${address}`;
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:", message);

        const signature = await signer.signMessage(message);
        console.log("üîè –ü–æ–¥–ø–∏—Å—å:", signature);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch("/walletconnect-login/auth", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').content,
          },
          body: JSON.stringify({ address, signature }),
        })
        .then(response => response.json())
        .then(data => {
          console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
          clearInterval(intervalId); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error));

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
      }

    } else {
      console.log("‚ùå –ö–æ—à–µ–ª—ë–∫ –ù–ï –ø–æ–¥–∫–ª—é—á—ë–Ω");
    }

    attempts++;
    if (attempts >= maxAttempts) {
      console.log("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
      clearInterval(intervalId);
    }

  }, 3000);
});